import { CommonModule } from '@angular/common';
import { Inject, Injectable, NgModule, Optional } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class PapaParseService {
    /**
     * @param {?=} config
     */
    constructor(config) {
        this.config = config;
        this.papa = require('papaparse/papaparse.min.js');
        /**
         * An array of characters that are not allowed as delimiters.
         */
        this.BAD_DELIMITERS = this.papa.BAD_DELIMITERS;
        /**
         * The true delimiter. Invisible. ASCII code 30.
         * Should be doing the job we strangely rely upon commas and tabs for.
         */
        this.RECORD_SEP = this.papa.RECORD_SEP;
        /**
         * Also sometimes used as a delimiting character. ASCII code 31.
         */
        this.UNIT_SEP = this.papa.UNIT_SEP;
        /**
         * Whether or not the browser supports HTML5 Web Workers.
         * If false, worker: true will have no effect.
         */
        this.WORKERS_SUPPORTED = this.papa.WORKERS_SUPPORTED;
        if (!this.config) {
            this.config = {};
        }
    }
    /**
     * Parse CSV to an array
     * @param {?} csv
     * @param {?=} config
     * @return {?}
     */
    parse(csv, config) {
        if (config) {
            if (config.worker === true) {
                if (this.config.workerScriptPath) {
                    this.papa.SCRIPT_PATH = this.config.workerScriptPath;
                }
                else {
                    throw new Error('When using workers, the workerScriptPath must be defined in global' +
                        ' papaparse configuration. See https://github.com/Alberthaff/papaparse/wiki/Using-workers' +
                        ' for more information.');
                }
            }
        }
        return this.papa.parse(csv, config);
    }
    /**
     * Convert an array into CSV
     * @param {?} data
     * @param {?=} config
     * @return {?}
     */
    unparse(data, config) {
        return this.papa.unparse(data, config);
    }
    /**
     * Set the size in bytes of each file chunk.
     * Used when streaming files obtained from the DOM that
     * exist on the local computer. Default 10 MB.
     * @param {?} value
     * @return {?}
     */
    setLocalChunkSize(value) {
        this.papa.LocalChunkSize = value;
    }
    /**
     * Set the size in bytes of each remote file chunk.
     * Used when streaming remote files. Default 5 MB.
     * @param {?} value
     * @return {?}
     */
    setRemoteChunkSize(value) {
        this.papa.RemoteChunkSize = value;
    }
    /**
     * Set the delimiter used when it is left unspecified and cannot be detected automatically. Default is comma.
     * @param {?} value
     * @return {?}
     */
    setDefaultDelimiter(value) {
        this.papa.DefaultDelimiter = value;
    }
}
PapaParseService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
PapaParseService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: ['PapaParseGlobalConfig',] },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class PapaParseModule {
}
PapaParseModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                ],
                providers: [
                    PapaParseService
                ]
            },] },
];
/** @nocollapse */
PapaParseModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { PapaParseService, PapaParseModule };
//# sourceMappingURL=ngx-papaparse.js.map
